51.函数简介
函数也是一个对象
函数中可以封装一些功能（代码），需要时可以执行这些功能
使用typeof检查一个函数对象时，会返回function

1.创建一个函数对象
//可以将要封装的代码以字符串的形式传递给构造函数
//封装到函数中的代码不会立即执行
//函数中的代码会在函数调用的时候执行
//调用函数语法
  函数对象()
//当调用函数时，函数中封装的代码会按照顺序执行
//函数对象用于普通对象的功能
//在实际开发中很少使用构造函数创建一个函数
var fun = new Function(“console.log('--')”)
console.log(typeof fun) //输出function


2.使用函数声明来创建一个函数
语法：
function 函数名([形参1，形参2...形参N]) {
}
注意：中括号里面的参数时可选的，表示既可以传也可以不传

调用：
函数名()

3.使用函数表达式的方式创建一个函数
语法：
就是创建一个匿名函数，然后将函数对象赋值给一个变脸
var 函数名 = function([形参1，形参2...形参N]){
}

//匿名函数
function() {
}

52.函数的参数
可以在函数()中来指定一个或者多个形参
多个形参之间使用逗号(,)隔开，声明形参就相当于在函数内部声明了对应的变量
但是并没有赋值

在调用的时候可以在()中指定实参(实际参数)
实参将会赋值给函数对应的形参

调用函数时，解析器不会检查实参的类型
  所以要注意，是否有可能会接收到非法的参数，如果有可能需检查实参的类型
实参可以是任意的数据类型
调用函数时，解析器也不会检查实参的数量
  多余的实参，不会被赋值
  如果实参数量小于形参的数量，没有实参对应的型参为undefined
  
  
53.返回值的问题

可以使用return来设置函数的返回值
语法：
  return 值
return后的值，将会作为函数的执行结果返回
可以定义一个变量来接收返回的结果

在函数中return后的语句都不会执行

return后不跟值表示，相当于返回一个undefined
如果函数不return，则会返回undefined

return后可以跟任意类型的值


54、实参可以是任何值

函数也可以是参数

55、返回值的参数

56、立即执行函数

函数定义完之后立即被调用
这种函数往往只会执行一次

(function(){
  alert("我是一个匿名函数")
})()




 
  